/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from C:\Users\finne\OneDrive\Documents\0coding\Lang3\Lang3\Tools\Extension\syntaxes\lang3.tmLanguage.json (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

/* DO NOT EDIT HERE! EDIT `src/mode-lang3.js` INSTEAD! */

"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var lang3HighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#all"
        }],
        "#all": [{
            include: "#internal"
        }, {
            include: "#strings-double"
        }, {
            include: "#strings-single"
        }, {
            include: "#code-blocks"
        }, {
            include: "#bools"
        }, {
            include: "#operators"
        }, {
            include: "#variables"
        }, {
            include: "#numbers"
        }, {
            include: "#tables"
        }, {
            include: "#comments-header"
        }, {
            include: "#comments-important"
        }, {
            include: "#comments-block"
        }, {
            include: "#comments-line"
        }],
        "#strings-double": [{
            token: [
                "storage.modifier.string.lang3",
                "string.quoted.double.lang3"
            ],
            regex: /([a-zA-Z]*)(")/,
            push: [{
                token: "string.quoted.double.lang3",
                regex: /(?<!\\)"/,
                next: "pop"
            }, {
                token: "constant.language.lang3",
                regex: /(?<!\\)\{/,
                push: [{
                    token: "constant.language.lang3",
                    regex: /\}/,
                    next: "pop"
                }, {
                    include: "#all"
                }, {
                    defaultToken: "meta.embedded"
                }]
            }, {
                defaultToken: "string.quoted.double.lang3"
            }]
        }],
        "#strings-single": [{
            token: [
                "storage.modifier.string.lang3",
                "string.quoted.single.lang3"
            ],
            regex: /([a-zA-Z]*)(')/,
            push: [{
                token: "string.quoted.single.lang3",
                regex: /(?<!\\)'/,
                next: "pop"
            }, {
                token: "constant.language.lang3",
                regex: /(?<!\\)\{/,
                push: [{
                    token: "constant.language.lang3",
                    regex: /\}/,
                    next: "pop"
                }, {
                    include: "#all"
                }, {
                    defaultToken: "meta.embedded"
                }]
            }, {
                defaultToken: "string.quoted.single.lang3"
            }]
        }],
        "#numbers": [{
            token: "constant.numeric.lang3",
            regex: /\-?[0-9]+(?:\.[0-9]+)?/
        }],
        "#bools": [{
            token: "constant.language.lang3",
            regex: /true|false/
        }],
        "#comments-code-blocks": [{
            token: "comment.code-block-surroundings.lang3 constant.language.comment.code-block-surroundings.lang3",
            regex: /:/,
            push: [{
                token: "comment.code-block-surroundings.lang3 constant.language.comment.code-block-surroundings.lang3",
                regex: /;/,
                next: "pop"
            }, {
                token: "comment.code-block.error.lang3 invalid.illegal.comment.code-block.error.lang3",
                regex: /[^\\$#]*ERROR[^#$]*/
            }, {
                include: "#all"
            }, {
                defaultToken: " markup.italic.comment.code-block.lang3 meta.embedded.comment.code-block.lang3"
            }]
        }],
        "#comments-line": [{
            token: "comment.line.number-sign.lang3",
            regex: /#/,
            push: [{
                token: "comment.line.number-sign.lang3",
                regex: /#|$/,
                next: "pop"
            }, {
                include: "#comments-code-blocks"
            }, {
                defaultToken: "comment.line.number-sign.lang3"
            }]
        }],
        "#comments-block": [{
            token: "comment.block.lang3",
            regex: /#{2,}/,
            push: [{
                token: "comment.block.lang3",
                regex: /#{2,}/,
                next: "pop"
            }, {
                include: "#comments-code-blocks"
            }, {
                defaultToken: "comment.block.lang3"
            }]
        }],
        "#comments-important": [{
            token: "comment.block.bold.lang3",
            regex: /^###/,
            push: [{
                token: "comment.block.bold.lang3",
                regex: /#$/,
                next: "pop"
            }, {
                include: "#comments-code-blocks"
            }, {
                defaultToken: "comment.block.bold.lang3"
            }]
        }],
        "#comments-header": [{
            token: "comment.block.header.lang3",
            regex: /^#{4}/,
            push: [{
                token: "comment.block.header.lang3",
                regex: /#$/,
                next: "pop"
            }, {
                include: "#comments-code-blocks"
            }, {
                defaultToken: "comment.block.header.lang3"
            }]
        }],
        "#variables": [{
            token: "variable.other.lang3",
            regex: /[a-zA-Z_][a-zA-Z0-9_]*|\$[\. ]/
        }],
        "#operators": [{
            token: "keyword.operator.lang3",
            regex: /\+\+|\-\-|(?:\+|\-|\/\^|%|\*{1,2}|\/{1,2}|>{1,2}|<{1,2}|&{1,2}|\|{1,2}|!|=|\^)=?/
        }],
        "#tables": [{
            token: "meta.table.lang3",
            regex: /\{/,
            push: [{
                token: "meta.table.lang3",
                regex: /\}/,
                next: "pop"
            }, {
                token: "meta.table.header.lang3",
                regex: /@/,
                push: [{
                    token: "meta.table.header.lang3",
                    regex: /;/,
                    next: "pop"
                }, {
                    include: "#all"
                }, {
                    defaultToken: "meta.table.header.lang3"
                }]
            }, {
                include: "#all"
            }, {
                defaultToken: "meta.table.lang3"
            }]
        }],
        "#code-blocks": [{
            token: ["storage.modifier", "meta.code-block.lang3"],
            regex: /([a-zA-Z]*)(:)/,
            push: [{
                token: "meta.code-block.lang3",
                regex: /;/,
                next: "pop"
            }, {
                include: "#all"
            }, {
                defaultToken: "meta.code-block.lang3"
            }]
        }],
        "#internal": [{
            token: "invalid.illegal.reserved.internal.lang3",
            regex: /__internal.*/
        }]
    }
    
    this.normalizeRules();
};

lang3HighlightRules.metaData = {
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    scopeName: "source.lang3",
    name: "lang3"
}


oop.inherits(lang3HighlightRules, TextHighlightRules);

exports.lang3HighlightRules = lang3HighlightRules;